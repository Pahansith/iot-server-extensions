<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var caramel;
var PAGING = {};
var log = new Log();
require('/modules/store.js').exec(function(ctx) {
    caramel = require('caramel');
    var permissions = require('rxt').permissions;
    var asset = require('rxt').asset;
    var core = require('rxt').core;
    var ui = require('rxt').ui;
    var constants = require('rxt').constants;
    var store = ctx.store;
    var user = ctx.user;
    var am;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var assetPageUrl = "/{context}/t/{domain}/pages/devices";
    var tenantedAssetPageUrl = "/{context}/pages/devices";
    var options = uriMatcher.match(assetPageUrl) || uriMatcher.match(tenantedAssetPageUrl);
    options["type"] = "deviceType";
    var type = options.type;
    var assets = [];
    var tenantId = ctx.tenant.tenantId;
    //var sortOrder = ctx.request.getParameter('sortOrder');
    var page = ui.buildPage(ctx.session, ctx.request);
    var tag = ctx.request.getParameter('tag');
    var assetApi = require('/modules/asset-api.js').api;
    var tenantApi = require('/modules/tenant-api.js').api;

    PAGING.sortBy = constants.DEFAULT_ASSET_PAGIN.sortBy;
    PAGING.sortOrder = constants.DEFAULT_ASSET_PAGIN.sortOrder;
    PAGING.start = constants.DEFAULT_ASSET_PAGIN.start;
    PAGING.count = constants.DEFAULT_ASSET_PAGIN.count;
    var carbon = require('carbon');
    var URLTenantId = carbon.server.tenantId({
        domain: options.domain || constants.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME
    });
    var context;
    var tenantResources = tenantApi.createTenantAwareAssetResources(session, options);
    am = tenantResources.am;
    context = tenantResources.context;
    assets = am.search(null, PAGING);

    var deviceTypesIdList = {};
    for (var index in assets) {
        var singleAsset = assets[index];
        deviceTypesIdList[singleAsset.attributes.overview_deviceTypeName]=singleAsset.id;
    }

    page.deviceTypesIdList = deviceTypesIdList;

    var output = am.render([], page).list();
    output.paging = assetApi.assetsPaging(assets, type, ctx.request);
    caramel.render(output);
}, request, response, session); %>
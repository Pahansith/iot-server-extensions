<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/stats-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/dc-props.js').config();
var utility = require("/modules/utility.js").utility;
var deviceModule = require("/modules/device.js").deviceModule;

var from = request.getParameter("from");
var to = request.getParameter("to");

var user = session.get(constants.USER_SESSION_KEY);
if (!user) {
	response.sendRedirect(dcProps.appContext + "login?#login-required");
	exit();
}

var carbon = require('carbon');
var carbonHttpsServletTransport = carbon.server.address('https');
var deviceCloudService = carbonHttpsServletTransport + "/common/group_manager";

var statsClient = new Packages.org.wso2.carbon.device.mgt.iot.common.analytics.statistics.IoTUsageStatisticsClient;
var stats = {};
var deviceId;
var deviceType;
if (uriMatcher.match("/{context}/api/stats")) {

    deviceId = request.getParameter("deviceId");
    deviceType = request.getParameter("deviceType");

	getDeviceData(deviceType, deviceId);

}else if (uriMatcher.match("/{context}/api/stats/group")){
	var groupId = request.getParameter("groupId");

	//URL: GET https://localhost:9443/devicecloud/group_manager/group/id/{groupId}/device/all
	var endPoint = deviceCloudService + "/group/id/" + groupId + "/device/all";
	var data = {"username": user.username};
	var devices = get(endPoint, data, "json");

	for (var device in devices.data){
		deviceId = devices.data[device].deviceIdentifier;
		deviceType = devices.data[device].type;
		getDeviceData(deviceType, deviceId);
	}
}

// returning the result.
if (stats) {
    print(stats);
}

function getDeviceData(deviceType, deviceId){
	var device = deviceModule.getDevice(deviceType, deviceId);
	var uname = device.enrolmentInfo.owner;
	if (!device){
		return;
	}
	switch (deviceType) {
		case "firealarm":
			getFireAlarmData(uname, device, from, to);
			break;
		case "sensebot":
			getSensebotData(uname, device, from, to);
			break;
		case "arduino":
			getArduinoData(uname, device, from, to);
			break;
		case "digital_display":
			getDigitalDisplayData(uname, device, from, to);
			break;
		case "android_sense":
			getAndroidSenseData(uname, device, from, to);
			break;
		case "raspberrypi":
			getDigitalDisplayData(uname, device, from, to);
			break;
	}
}

function getFireAlarmData(user, device, from, to) {
	if (stats['temperatureData'] == null){
		stats['temperatureData'] = [];
	}
	if (stats['sonarData'] == null){
		stats['sonarData'] = [];
	}
	if (stats['motionData'] == null){
		stats['motionData'] = [];
	}
	if (stats['lightData'] == null){
		stats['lightData'] = [];
	}
	stats['temperatureData'].push({"device": device.name, "stats" : getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.deviceIdentifier, from, to)});
	stats['sonarData'].push({"device": device.name, "stats" : getSensorData("SONAR_SENSOR_SUMMARY", "sonar", user, device.deviceIdentifier, from, to)});
	stats['motionData'].push({"device": device.name, "stats" : getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.deviceIdentifier, from, to)});
	stats['lightData'].push({"device": device.name, "stats" : getSensorData("LDR_LIGHT_SENSOR_SUMMARY", "light", user, device.deviceIdentifier, from, to)});
}

function getSensebotData(user, device, from, to) {
	if (stats['sonarData'] == null){
		stats['sonarData'] = [];
	}
	if (stats['motionData'] == null){
		stats['motionData'] = [];
	}
	if (stats['lightData'] == null){
		stats['lightData'] = [];
	}
	if (stats['temperatureData'] == null){
		stats['temperatureData'] = [];
	}

	//Uncomment below section to emulate data
	/*
	var timeInterval = 30;
	var i, rnd, chartData;
	chartData = [];
	var i = parseInt(from);
	while (i < parseInt(to)) {
	    rnd = rnd = Math.random() * 50;
		chartData.push({time: i, value: rnd});
	    i += timeInterval;
	}
	stats['sonarData'].push({"device": device.name, "stats" : chartData});
	chartData = [];
	var i = parseInt(from);
	while (i < parseInt(to)) {
		rnd = Math.round(Math.random());
		chartData.push({time: i, value: rnd});
		i += timeInterval;
	}
	stats['motionData'].push({"device": device.name, "stats" : chartData});
	chartData = [];
	var i = parseInt(from);
	while (i < parseInt(to)) {
		rnd = Math.round(Math.random());
		chartData.push({time: i, value: rnd});
		i += timeInterval;
	}
	stats['lightData'].push({"device": device.name, "stats" : chartData});
	chartData = [];
	var i = parseInt(from);
	while (i < parseInt(to)) {
		rnd = Math.random() * (27 - 24) + 24;
		chartData.push({time: i, value: rnd});
		i += timeInterval;
	}
	stats['temperatureData'].push({"device": device.name, "stats" : chartData});
	*/

	//Comment below section to emulate data
	stats['sonarData'].push({"device": device.name, "stats" : getSensorData("SONAR_SENSOR_SUMMARY", "sonar", user, device.deviceIdentifier, from, to)});
	stats['motionData'].push({"device": device.name, "stats" : getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.deviceIdentifier, from, to)});
	stats['lightData'].push({"device": device.name, "stats" : getSensorData("LDR_LIGHT_SENSOR_SUMMARY", "light", user, device.deviceIdentifier, from, to)});
	stats['temperatureData'].push({"device": device.name, "stats" : getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.deviceIdentifier, from, to)});
}

function getArduinoData(user, device, from, to) {
	if (stats['temperatureData'] == null){
		stats['temperatureData'] = [];
	}
	stats['temperatureData'].push({"device": device.name, "stats" : getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.deviceIdentifier, from, to)});
}

function getAndroidSenseData(user, device, from, to) {
	if (stats['ramData'] == null){
		stats['ramData'] = [];
	}
	if (stats['cpuData'] == null){
		stats['cpuData'] = [];
	}
	if (stats['temperatureData'] == null){
		stats['temperatureData'] = [];
	}
	if (stats['motionData'] == null){
		stats['motionData'] = [];
	}
	stats['ramData'].push({"device": device.name, "stats" : getSensorData("RAM_USAGE_SUMMARY", "motion", user, device.deviceIdentifier, from, to)});
	stats['cpuData'].push({"device": device.name, "stats" : getSensorData("CPU_LOAD_SUMMARY", "light", user, device.deviceIdentifier, from, to)});
	stats['temperatureData'].push({"device": device.name, "stats" : getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.deviceIdentifier, from, to)});
	stats['motionData'].push({"device": device.name, "stats" : getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.deviceIdentifier, from, to)});
}

function getDigitalDisplayData(user, device, from, to) {
	if (stats['ramData'] == null){
		stats['ramData'] = [];
	}
	if (stats['cpuData'] == null){
		stats['cpuData'] = [];
	}
	if (stats['cpuTemperatureData'] == null){
		stats['cpuTemperatureData'] = [];
	}
	stats['ramData'].push({"device": device.name, "stats" : getSensorData("RAM_USAGE_SUMMARY", "motion", user, device.deviceIdentifier, from, to)});
	stats['cpuData'].push({"device": device.name, "stats" : getSensorData("CPU_LOAD_SUMMARY", "light", user, device.deviceIdentifier, from, to)});
	stats['cpuTemperatureData'].push({"device": device.name, "stats" : getSensorData("DEVICE_CPU_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.deviceIdentifier, from, to)});
}

function getSensorData(table, column, user, deviceIdentifier, from, to) {

    var fetchedData = null;

    try {
        fetchedData = statsClient.getDeviceStats(table, column, user, deviceIdentifier, from, to);
    } catch (error) {
        log.error(error);
    }

    var sensorData = [];

    if (fetchedData == null) return [];

    for (var i = 0; i < fetchedData.size(); i++) {
        sensorData.push({
            time: fetchedData.get(i).getTime(),
            value: fetchedData.get(i).getValue()
        });
    }

    return sensorData;
}

%>
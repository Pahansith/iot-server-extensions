<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/device-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/dc-props.js').config();

var deviceModule = require("/modules/device.js").deviceModule;

var carbon = require('carbon');
var carbonHttpServletTransport = carbon.server.address('http');
var carbonHttpsServletTransport = carbon.server.address('https');

var result;

if (uriMatcher.match("/{context}/api/device/sketch/download/{downloadId}")) {
	downloadId = uriMatcher.elements().downloadId;
	//Just download the already created zip archive
	var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
	var sketchFolder = "repository/resources/sketches";
	var archivesPath = "file://" + CarbonUtils.getCarbonHome() + "/" + sketchFolder + "/archives/" + downloadId + ".zip";
	var zipFile = new File(archivesPath);
	response.addHeader('Content-type', "application/zip, application/octet-stream");
	response.addHeader('Cache-Control', 'public,max-age=12960000');
	response.addHeader("Content-Disposition", "attachment; filename=\"" + downloadId + ".zip\"");

	try {
		zipFile.open('r');
		var stream = zipFile.getStream();
		print(stream);
	} catch (err) {

	} finally {
		if (zipFile != null) {
			zipFile.close();
		}
	}

} else if (uriMatcher.match("/{context}/api/device/sketch/download")) {
	//Create a new zip archive and register user calling endpoint

	/* This should match with $CARBON_HOME/repository/resources/sketches/{sketchType} */
	sketchType = request.getParameter("sketchType");
	/* This should be registered device type of the CDMF(Connected Device Management Framework) */
	deviceType = request.getParameter("deviceType");

	if (!sketchType) {
		log.error("Sketch Type is empty!");
		// http status code 400 refers to - Bad request.
		result = 400;
	} else {
		var user = session.get(constants.USER_SESSION_KEY);

		if (!user) {
			response.sendRedirect(dcProps.appContext + "login?#login-required");
			exit();
		}

		//URL: https://localhost:9443/{deviceType}/download?owner={username}
		deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";

		sketchDownloadEndPoint = deviceManagerService + "/device/" + sketchType + "/download";
		response.sendRedirect(sketchDownloadEndPoint + "?owner=" + user.username);
		exit();//stop execution

	}
} else if (uriMatcher.match("/{context}/api/device/sketch/generate_link")) {

	var contents = request.getContent();
	sketchType = contents.sketchType;
	deviceType = contents.deviceType;
	generateLink = contents.generateLink;

	if (!sketchType) {
		log.error("Sketch Type is empty!");
		// http status code 400 refers to - Bad request.
		result = 400;
	} else {
		var user = session.get(constants.USER_SESSION_KEY);

		if (!user) {
			result = 403;
		} else {
			//URL: https://localhost:9443/{deviceType}/download?owner={username}
			deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";

			sketchGenerateLinkEndPoint = deviceManagerService + "/device/" + sketchType + "/generate_link";
			var fileId = get(sketchGenerateLinkEndPoint + "?owner=" + user.username, null, "text");
			result = "curl -k " + carbonHttpsServletTransport + constants.WEB_APP_CONTEXT + "/api/device/sketch/download/" + fileId.data;
		}
	}

} else if (uriMatcher.match("/{context}/api/devices/all")) {

	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	//URL: https://localhost:9443/devicecloud/manager/devices/username/{username}
	deviceCloudService = carbonHttpsServletTransport + "/common/device_manager";
	listAllDevicesEndPoint = deviceCloudService + "/devices/username/" + user.username;
	result = get(listAllDevicesEndPoint, {}, "json");
	var ownDevices = result.data;

	var allDevices = [];
	deviceCloudService = carbonHttpsServletTransport + "/common/group_manager";
	var endPoint = deviceCloudService + "/group/user/" + user.username + "/all";
	var data = {"username": user.username};
	var groups = get(endPoint, data, "json").data;

	for (var g in groups) {
		endPoint = deviceCloudService + "/group/id/" + groups[g].id + "/device/all";
		data = {"username": user.username};
		var deviceInGroup = get(endPoint, data, "json").data;
		groups[g].devices = deviceInGroup;
		allDevices.push(groups[g]);
		for (var od in ownDevices) {
			for (var gd in deviceInGroup) {
				if (deviceInGroup[gd].deviceIdentifier == ownDevices[od].deviceIdentifier) {
					ownDevices[od].deviceIdentifier = -1;
				}
			}
		}
	}
	var unsharedDevices = [];
	for (var od in ownDevices) {
		if (ownDevices[od].deviceIdentifier != -1){
			unsharedDevices.push(ownDevices[od]);
		}
	}
	allDevices.push({id: 0, devices: unsharedDevices});
	result.data = allDevices;

} else if (uriMatcher.match("/{context}/api/devices/count")) {

	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	//URL: https://localhost:9443/devicecloud/manager/devices/username/{username}
	deviceCloudService = carbonHttpsServletTransport + "/common/device_manager";
	listAllDevicesEndPoint = deviceCloudService + "/devices/username/" + user.username;
	result = get(listAllDevicesEndPoint, {}, "json");
	var ownDevices = result.data;

	var allDevices = [];
	deviceCloudService = carbonHttpsServletTransport + "/common/group_manager";
	var endPoint = deviceCloudService + "/group/user/" + user.username + "/all";
	var data = {"username": user.username};
	var groups = get(endPoint, data, "json").data;

	var count = 0;
	for (var g in groups) {
		endPoint = deviceCloudService + "/group/id/" + groups[g].id + "/device/all";
		data = {"username": user.username};
		var deviceInGroup = get(endPoint, data, "json").data;
		groups[g].devices = deviceInGroup;
		allDevices.push(groups[g]);
		for (var od in ownDevices) {
			for (var gd in deviceInGroup) {
				if (deviceInGroup[gd].deviceIdentifier == ownDevices[od].deviceIdentifier) {
					ownDevices[od].deviceIdentifier = -1;
				}
			}
		}
		count += deviceInGroup.length;
	}
	for (var od in ownDevices) {
		if (ownDevices[od].deviceIdentifier != -1){
			count++;
		}
	}
	result = count.toString();

} else if (uriMatcher.match("/{context}/api/devices/types")) {

	result = deviceModule.listDeviceTypes();

} else if (uriMatcher.match("/{context}/api/device/{deviceType}/{deviceId}/remove")) {
	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	var elements = uriMatcher.elements();
	var deviceId = elements.deviceId;
	var deviceType = elements.deviceType;
	result = deviceModule.removeDevice(deviceType, deviceId);

} else if (uriMatcher.match("/{context}/api/device/{deviceType}/{deviceId}/update")) {
	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	var elements = uriMatcher.elements();
	var deviceId = elements.deviceId;
	var deviceType = elements.deviceType;
	var cont = request.getContent();

	if (!cont.device) {
		// http status code 400 refers to - Bad request.
		result = 400;
	} else {
		result = deviceModule.updateDevice(deviceType, deviceId, cont.device);
	}
}

// returning the result.
if (result) {
	print(result);
}
%>
